#! /usr/bin/env python3
# The MIT License (MIT)
#
# Copyright (C) 2016 Josef Gajdusek <atx@atx.name>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import argparse
import atexit
import asyncio
import glob
import minilocker
import minilocker.config as config
from minilocker.filter import DecimatingFIRFilter, CompositeFilter, ScaleFilter
from quamash import QtGui, QEventLoop
import pyqtgraph as pg
import pyqtgraph.opengl as gl
from numpy import *

async def main(args, scatter):

    accfilt = CompositeFilter(
                    DecimatingFIRFilter([1] * 10, decimate = 10),
                    ScaleFilter(10))
    gyrfilt = CompositeFilter(
                    DecimatingFIRFilter([1] * 10, decimate = 10),
                    ScaleFilter(10))
    magfilt = CompositeFilter(
                    DecimatingFIRFilter([1] * 10, decimate = 10),
                    ScaleFilter(1000))

    filts = [accfilt, gyrfilt, magfilt]

    colors = array([(1, 0, 0, 1), (0, 1, 0, 1), (0, 0, 1, 1)])

    cfg, ml = await config.cli_connect(args)

    cimu = None
    cmag = None
    pts = [minilocker.Point3d.ZERO] * 3
    while True:
        if not cimu:
            cimu = asyncio.Task(ml.next_imu())
        if not cmag:
            cmag = asyncio.Task(ml.next_magnet())

        done, _ = await asyncio.wait([cimu, cmag], return_when = asyncio.FIRST_COMPLETED)

        update = [None] * 3
        if cimu.done():
            acc, gyr = cimu.result()
            update[0] = acc
            update[1] = gyr
            cimu = None
        if cmag.done():
            mag = cmag.result()
            update[2] = mag
            cmag = None

        upflag = False
        for i, (n, f) in enumerate(zip(update, filts)):
            if n is not None:
                fpt = f.push(n)
                if fpt:
                    pts[i] = fpt
                    upflag = True
        if upflag:
            pos = array([list(p) for p in pts])
            scat.setData(pos = pos, size = 0.7, color = colors, pxMode = False)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog = "MiniLocker data viewer"
    )
    config.cli_add_default_args(parser)
    args = parser.parse_args()

    app = QtGui.QApplication([])
    loop = QEventLoop(app)
    asyncio.set_event_loop(loop)
    atexit.register(loop.close)

    view = gl.GLViewWidget()
    view.show()

    xgrid = gl.GLGridItem()
    view.addItem(xgrid)

    centerdot = gl.GLScatterPlotItem()
    centerdot.setData(pos = array([[0, 0, 0]]), size = 0.3,
                      color = (1, 1, 0, 1), pxMode = False)
    view.addItem(centerdot)

    scat = gl.GLScatterPlotItem()
    scat.setData(pos = array([[0, 0, 0]]), size = array([0]),
                 color = array([0, 0, 0, 0]), pxMode = False)
    view.addItem(scat)

    loop.run_until_complete(main(args, scat))
